apply plugin: "io.spring.dependency-management"
apply plugin: "kotlin-allopen"
apply plugin: "org.springframework.boot"
apply plugin: "propdeps"
apply plugin: "propdeps-maven"
apply plugin: "propdeps-idea"

apply from: "$project.rootDir/gradle/scripts/deployment.gradle"
apply from: "$project.rootDir/gradle/scripts/kotlin.gradle"
apply from: "$project.rootDir/gradle/scripts/testing-junit.gradle"
apply from: "$project.rootDir/gradle/scripts/static-analysis-detekt.gradle"
apply from: "$project.rootDir/gradle/scripts/coverage-jacoco.gradle"
apply from: "integration-test.gradle"
apply from: "task-deploy.gradle"

static def logD(String message) { System.out.println("DEBUG: $message") }

static def logI(String message) { System.out.println("INFO : $message") }

static def logW(String message) { System.err.println("WARN : $message") }

static def logE(String message) { System.err.println("ERROR: $message") }

jar {
    enabled = true
    baseName = "${rootProject.name}-application"
    version = "$versioning_tag-$versioning_sha-b$versioning_commitCount"

    manifest {
        attributes "Main-Class": "com.github.fj.restapi.Application"
    }

    // FatJar
    // https://issues.gradle.org/browse/GRADLE-1361
    from {
        configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
    }
}

allOpen {
    annotation("com.github.fj.lib.annotation.AllOpen")
}

sourceSets {
    def allowedBuildTargets = ["dev", "alpha", "beta", "release"]
    def buildConfig
    if (project.hasProperty("buildConfig")) {
        buildConfig = project.properties["buildConfig"].toString().toLowerCase(Locale.US)
    } else {
        buildConfig = "dev"
        logW("No build configuration is specified - '$buildConfig' is used by default")
    }

    if (!allowedBuildTargets.contains(buildConfig)) {
        throw new IllegalArgumentException("Only these build targets are accepted: $allowedBuildTargets")
    }

    logI("Building JAR for '$buildConfig' environment")
    main {
        java {
            srcDirs srcDirs = [srcDirs, "src/$buildConfig/java", "src/$buildConfig/kotlin"]
        }

        resources {
            srcDirs srcDirs = [srcDirs, "src/$buildConfig/resources"]
        }
    }
}

configurations {
    compile.exclude module: "spring-boot-starter-tomcat"
}

compileJava.dependsOn(processResources)

dependencies {
    compile project(":3rdparty_fcmclient")

    compile "javax.inject:javax.inject:1"

    // Spring MVC
    compile("org.springframework.boot:spring-boot-starter")
    compile("org.springframework.boot:spring-boot-starter-web") {
        exclude group: "org.springframework.boot", module: "spring-boot-starter-tomcat"
    }
    compile("org.springframework.boot:spring-boot-starter-webflux")
    compile("org.springframework.boot:spring-boot-starter-undertow") {
        // Since this application is for REST Api and we don't need websocket.
        exclude group: "io.undertow", module: "undertow-websockets-jsr"
    }
    compile("org.springframework.boot:spring-boot-starter-actuator")
    compile("org.springframework.boot:spring-boot-starter-security")

    // Spring Data + JPA
    compile("org.springframework.boot:spring-boot-starter-data-jpa")
    compile("org.springframework:spring-tx")
    compile("com.zaxxer:HikariCP")
    // Change this to your favourite database (and apply it to application.yml configuration file)
    compile("org.mariadb.jdbc:mariadb-java-client")

    // Jackson Kotlin support
    compile("com.fasterxml.jackson.module:jackson-module-kotlin")

    // Swagger integration
    compile "io.springfox:springfox-swagger2:$version_swagger2"
    compile "io.springfox:springfox-swagger-ui:$version_swagger2"

    compile "io.seruco.encoding:base62:0.1.2"

    testCompile project(path: ":app_lib", configuration: "testArtifacts")

    testCompile("org.springframework.boot:spring-boot-starter-test")
    testCompile("org.springframework.security:spring-security-test")
    testCompile("com.h2database:h2")
    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.boot:spring-boot-dependencies:$version_springBoot"
    }
}
